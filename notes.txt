

# set up a basic database



# NOTE: phx.gen.auth generates a users table for you

# perfect docs
mix help phx.gen.schema

mix phx.gen.schema Game games title:string alt_titles:array:string makers:array:string studios:array:string countries:array:string languages:array:string release_year:integer devices:array:string tags:array:string tech_tags:array:string short_description:string

# skip job positions for now
# maybe can cache average rating in db later..
# note: title, maker names, studios can have the same name
# note: used plural words for arrays (just made this naming convention up!)
# tags are similar to itch.io's tags, where a tag can be anything: game system, game style
# TODO: use tags for genre, tech, game system?
# genre yes, tech tags, not so sure.. and what about mods?

# TODO: need to figure-out 'n set relations for many of these fileds
# has_many(t)
# has_one(t)
# many_to_many(t)

# keep it simple for now: and use a single table design
# who knows how contemporary database magic works!
# countries, languages, etc. can be it's own table, but.. meh, not so sure about multiple joins

# how to handle same titles, maker names, etc.?
# should all strings be unique?
# nah, they'll have a unique id, just use that to differentiate

# can add and think about more later
# but be warned, updating schemas isn't so simple :/


# TODO: lists schema
mix phx.gen.schema List lists user_id:references:users games:array:int

# schemas for later features
mix phx.gen.schema Media.Review reviews user_id:references:users game_id:references:games rating:integer review_text:text created_at:utc_datetime updated_at:utc_datetime
mix phx.gen.schema Media.Watchlist watchlists user_id:references:users game_id:references:games created_at:utc_datetime updated_at:utc_datetime

# much later
mix phx.gen.schema Social.Follower followers follower_id:references:users followed_id:references:users created_at:utc_datetime updated_at:utc_datetime





# generate authentication code
# NOTE: since this is simply generated, it's upto you to port new generated code
mix phx.gen.auth Accounts User users
# enter y for the liveview version
mix deps.get
mix ecto migrate

# can test it
# WARNING: will build/compile it
# mix test




# create views/contexts and controllers

# similar to https://letterboxd.com/films/
# no, i never use that page...
# https://letterboxd.com/film/
# TODO: maybe should've used --web namespace
# in case of multiple "contexts" for the same schema
mix phx.gen.html Games Game games --no-schema

# TODO: later, but def the most important feature, even more than reviews
# NOTE: create schema first, no clue what this would generate
# similar to https://letterboxd.com/lists/
# no, i never use that page..
# https://letterboxd.com/list/
mix phx.gen.html Lists List lists --no-schema



add the resource to your browser scope in lib/game_archive_web/router.ex:

    resources "/games", GameController

add it under these lines:
  scope "/", GameArchiveWeb do
    pipe_through :browser

add some routes?



# make some views 'n templates
TODO: time to do some reading..
https://hexdocs.pm/phoenix/1.4.3/adding_pages.html#content
  - quickly went through this, shows creating the :show action / page, which is already auto-generated


error:
GameArchive.Games.Game.__struct__/1 is undefined, cannot expand struct GameArchive.Games.Game. Make sure the struct name is correct. If the struct name exists and is correct but it still cannot be found, you likely have cyclic module usage in your code

solution:
alias GameArchive.Game # NOT: GameArchive.Games.Game



TODO: stopped here
error:
duplicate table

solution:
rm ./build -force
build app again




https://hexdocs.pm/phoenix/1.7.14/contexts.html#thinking-about-contexts
  - TODO: read this




prompt (ms copilot):
make me a web-site similar to letterboxd using the phoenix framework (elixir)

Certainly! Building a website similar to Letterboxd using the Phoenix Framework (Elixir) is an exciting project. Letterboxd is a social platform for film enthusiasts, so we‚Äôll focus on creating a simplified version with some core features.

Before we dive into the implementation, let‚Äôs outline the key features we‚Äôll include in our Phoenix-based movie platform:

User Authentication: Users can sign up, log in, and manage their profiles.
Movie Listings: Display a list of movies with details (title, release year, genre, etc.).
User Reviews and Ratings: Allow users to rate and review movies.
Lists and Collections: Users can create and manage lists (e.g., ‚ÄúWatchlist,‚Äù ‚ÄúFavorites,‚Äù etc.).
Search and Filtering: Implement search functionality and filters for movies.
User Recommendations: Provide personalized movie recommendations based on user preferences.
Responsive Design: Ensure the website works well on different devices (desktop, tablet, mobile).
Let‚Äôs get started with the basics:

1. Setting Up Your Phoenix Project
Install Elixir and Phoenix:
Make sure you have Elixir installed. If not, follow the installation instructions from the official Elixir website.
Install the Phoenix project generator:
mix archive.install hex phx_new

Create a new Phoenix project:
mix phx.new my_movie_platform
cd my_movie_platform

2. Define Your Data Models
Create a Movie schema:
mix phx.gen.schema Movie movies title:string release_year:integer genre:string

Create a User schema (for authentication):
mix phx.gen.schema User users email:string password_hash:string

3. Implement User Authentication
Set up authentication using phx.gen.auth:
mix phx.gen.auth Accounts User users

4. Create Movie Views and Controllers
Create a controller for movies:
mix phx.gen.html Movies Movie movies title:string release_year:integer genre:string

Add routes for movies in lib/my_movie_platform_web/router.ex.

TODO: stopped here
5. Implement Movie Listings and Details
Create views and templates for movie listings and details.
Fetch movie data from your database and display it on the website.

6. User Reviews and Ratings
Create a Review schema (with fields like user_id, movie_id, rating, and comment).

Implement CRUD operations for reviews.
7. Lists and Collections
Create a List schema (with fields like user_id, name, and description).
Allow users to create and manage lists (e.g., watchlist, favorites).
8. Search and Filtering
Implement search functionality for movies.
Add filters (by genre, release year, etc.).
9. User Recommendations
Use collaborative filtering or content-based recommendation algorithms to suggest movies to users.
10. Styling and Responsive Design
Use CSS (or a front-end framework like Tailwind CSS) to style your website.
Ensure it looks good on different devices.
Remember that this is just a high-level overview. You‚Äôll need to dive deeper into each feature, handle validations, security, and more. Additionally, consider using Phoenix LiveView for real-time interactions (e.g., updating reviews without page reloads).

Feel free to explore additional features and make your movie platform unique! If you have any specific questions or need further guidance, feel free to ask‚ÄîI‚Äôm here to assist! üé¨üçø 12

By the way, do you have any preferences for the design or additional features you‚Äôd like to include?
